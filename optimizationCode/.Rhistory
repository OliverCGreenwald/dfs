library(Rsafd)
# General
library(Rsafd)
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
PCS.est = fit.gpd(PCS.index, tail="upper", upper = 4 ,upper.method ="ml")
par(mfrow=c(2,1))
tailplot(PCS.est, optlog= "x")
tailplot(PCS.est)
PCS.est@upper.par.ests
shape.plot(PCS.index)
# Risk analysis
PCSsim = qgpd(PCS.est, runif(length(PCS.index)))
par(mfrow=c(1,2))
plot(PCS[,1], PCS.index)
plot(PCS[,1], PCSsim)
install.packages("rgl")
library(Rsafd)
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
PCS.est = fit.gpd(PCS.index, tail="upper", upper = 4 ,upper.method ="ml")
par(mfrow=c(2,1))
tailplot(PCS.est, optlog= "x")
tailplot(PCS.est)
PCS.est@upper.par.ests
shape.plot(PCS.index)
# Risk analysis
PCSsim = qgpd(PCS.est, runif(length(PCS.index)))
par(mfrow=c(1,2))
plot(PCS[,1], PCS.index)
plot(PCS[,1], PCSsim)
install.packages("~/Downloads/Rsafd_1.2.tar.gz", repos = NULL, type = "source")
library(Rsafd)
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
PCS.est = fit.gpd(PCS.index, tail="upper", upper = 4 ,upper.method ="ml")
par(mfrow=c(2,1))
tailplot(PCS.est, optlog= "x")
tailplot(PCS.est)
PCS.est@upper.par.ests
shape.plot(PCS.index)
# Risk analysis
PCSsim = qgpd(PCS.est, runif(length(PCS.index)))
par(mfrow=c(1,2))
plot(PCS[,1], PCS.index)
plot(PCS[,1], PCSsim)
install.packages("~/Downloads/Rsafd_1.2.tar.gz", repos = NULL, type = "source")
install.packages("mvtnorm")
install.packages("robustbase")
install.packages("quantreg")
install.packages("timeDate")
install.packages("~/Downloads/Rsafd_1.2.tar.gz", repos = NULL, type = "source")
library(Rsafd)
install.packages("rgl")
install.packages("~/Downloads/rgl_0.95.1337.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/Rsafd_1.2.tar.gz", repos = NULL, type = "source")
install.packages(c("timeDate","mvtnorm","quadprog","quantreg","rgl","robustbase","scatterplot3d","SparseM","tseries"))
install.packages("~/Downloads/rgl_0.95.1337.tar.gz", repos = NULL, type = "source")
[,1]
library(Rsafd)
install.packages(c("timeDate","mvtnorm","quadprog","quantreg","rgl","robustbase","scatterplot3d","SparseM","tseries"))
install.packages(c("timeDate","mvtnorm","quadprog","quantreg","rgl","robustbase","scatterplot3d","SparseM","tseries"))
install.packages(c("timeDate","mvtnorm","quadprog","quantreg","rgl","robustbase","scatterplot3d","SparseM","tseries"))
install.packages("~/Downloads/Rsafd_1.2.tar.gz", repos = NULL, type = "source")
install.packages("x12")
install.packages(c("timeDate","mvtnorm","quadprog","quantreg","rgl","robustbase","scatterplot3d","SparseM","tseries"))
install.packages("x11")
install.packages(c("timeDate","mvtnorm","quadprog","quantreg","rgl","robustbase","scatterplot3d","SparseM","tseries"))
install.packages("X11")
sudo apt-get install libx11-dev
install.packages("~/Downloads/rgl_0.95.1201.tgz", repos = NULL)
install.packages("~/Downloads/rgl_0.95.1247.tgz", repos = NULL)
install.packages("~/Downloads/rgl_0.95.1247.tgz")
install.packages("X11")
install.packages("~/Downloads/rgl_0.92.861.tar.gz", repos = NULL, type = "source")
library(Rsafd)
install.packages("~/Downloads/Rsafd_1.2.tar.gz", repos = NULL, type = "source")
library(Rsafd)
install.packages(c("timeDate","mvtnorm","quadprog","quantreg","rgl","robustbase","scatterplot3d","SparseM","tseries"))
library(Rsafd)
install.packages(c("timeDate","mvtnorm","quadprog","quantreg","rgl","robustbase","scatterplot3d","SparseM","tseries"))
library(Rsafd)
library(Rsafd)
library(rgl)
library(Rsafd)
library(Rsafd)
install.packages("~/Downloads/Rsafd_1.2.tar.gz", repos = NULL, type = "source")
library(Rsafd)
library(Rsafd)
library(Rsafd)
library(Rsafd)
library(Rsafd)
head(PCS)
library("x12", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(Rsafd)
library(Rsafd)
qqplot(r.exp,PCS.index)
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
PCS.est = fit.gpd(PCS.index, tail="upper", upper = 4 ,upper.method ="ml")
par(mfrow=c(2,1))
tailplot(PCS.est, optlog= "x")
tailplot(PCS.est)
PCS.est@upper.par.ests
shape.plot(PCS.index)
# Risk analysis
PCSsim = qgpd(PCS.est, runif(length(PCS.index)))
par(mfrow=c(1,2))
plot(PCS[,1], PCS.index)
plot(PCS[,1], PCSsim)
# General
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
PCS.est = fit.gpd(PCS.index, tail="upper", upper = 4 ,upper.method ="ml")
par(mfrow=c(2,1))
tailplot(PCS.est, optlog= "x")
tailplot(PCS.est)
PCS.est@upper.par.ests
shape.plot(PCS.index)
# Risk analysis
PCSsim = qgpd(PCS.est, runif(length(PCS.index)))
par(mfrow=c(1,2))
plot(PCS[,1], PCS.index)
plot(PCS[,1], PCSsim)
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
head(PCS)
plot(PCS[,1],PCS[,2])
PCS.index = PCS[,2]
# Quantile
par(mfrow=c(1,2))
qqexp(PCS.index)
r.exp=rexp(length(PCS.index))
qqplot(r.exp,PCS.index)
# Tail Estimation
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="lmom")
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
par(mfrow=c(1,2))
PCS.est = fit.gpd(PCS.index, tail="upper",upper.method ="ml")
PCS.est = fit.gpd(PCS.index, tail="upper", upper = 4 ,upper.method ="ml")
par(mfrow=c(2,1))
tailplot(PCS.est, optlog= "x")
tailplot(PCS.est)
PCS.est@upper.par.ests
shape.plot(PCS.index)
# Risk analysis
PCSsim = qgpd(PCS.est, runif(length(PCS.index)))
par(mfrow=c(1,2))
plot(PCS[,1], PCS.index)
plot(PCS[,1], PCSsim)
library(Rsafd)
library(Rsafd)
library(Rsafd)
help(seriesData)
help(plot)
library(Rsafd)
help(plot)
help(seriesData)
library(Rsafd)
library(Rsafd)
library(Rsafd)
help(seriesData)
library(Rsafd)
help(seriesData)
help(getDataPart)
library(Rsafd)
plot(x)
library(Rsafd)
library(Rsafd)
library(Rsafd)
names(PSPOT)
dim(PSPOT)
length(PSPOT)
plot(PSPOT)
qqnorm(PSPOT) # heavy right tail
qqexp(PSPOT) # should have used this b/c stock prices only positive!!
shape.plot(PSPOT) # use 175 for threshold
PSPOT.est = fit.gpd(PSPOT, tail="upper", upper = 175, upper.method ="ml") # linear so good #p.103 #and p.99 this plot should show a linear trend in case the Balkema-de Hann-Pickands theorem holds.
PSPOT.est
tailplot(PSPOT.est, optlog= "x") # also good fit, so 175 is good threshold
PSPOT.est@upper.par.ests # extract parameters
mydb = dbConnect(MySQL(), user='host', password='NEW-ROOT-PASSWORD', host='localhost')
library(pitchRx)
library(dplyr)
library(RMySQL)
library(dbConnect)
mydb = dbConnect(MySQL(), user='host', password='NEW-ROOT-PASSWORD', host='localhost')
my_db <- src_mysql("pitchfx.mysql",create = TRUE)
my_db <- src_mysql("pitchfx.mysql", user = 'host', password='NEW-ROOT-PASSWORD', create = TRUE)
my_db <- src_mysql("pitchfx.mysql", user = 'host', password='NEW-ROOT-PASSWORD', create = TRUE)
my_db <- src_mysql("pitchfx.mysql", user = 'host', password="NEW-ROOT-PASSWORD", create = TRUE)
mydb = dbConnect(MySQL(), user='host', password='NEW-ROOT-PASSWORD', host='localhost')
help("dbConnect")
con <- dbConnect(dbDriver("MySQL"), user = "host", password = "NEW-ROOT-PASSWORD", dbname = "pitchfx")
my_db <- src_mysql("pitchfx.mysql", user = 'root', password="NEW-ROOT-PASSWORD", create = TRUE)
con <- dbConnect(dbDriver("MySQL"), user = "root", password = "NEW-ROOT-PASSWORD", dbname = "pitchfx")
con
my_db <- src_mysql("pitchfx.mysql", user = 'root', password="NEW-ROOT-PASSWORD", create = TRUE)
my_db <- src_mysql("pitchfx", user = 'root', password="NEW-ROOT-PASSWORD", create = TRUE)
my_db
scrape(start = "2008-01-01", end = Sys.Date() - 1, connect = my_db$con)
db <- src_mysql("pitchfx", user = 'root', password="NEW-ROOT-PASSWORD")
atbats <- tbl(db, 'atbat')
db
atbats$query
select(tbl(db, "atbat"), date)
library(pitchRx)
library(dplyr)
library(RMySQL)
library(dbConnect)
my_db <- src_mysql("pitchfx", user = 'root', password="NEW-ROOT-PASSWORD", create = TRUE)
my_db <- src_mysql("pitchfx", user = 'root', password="NEW-ROOT-PASSWORD", create = TRUE)
dates <- collect(select(tbl(my_db, "game"), original_date))
db <- src_mysql("pitchfx", user = 'root', password="NEW-ROOT-PASSWORD")
atbats <- tbl(db, 'atbat')
atbats$query
dates <- collect(select(tbl(my_db, "game"), original_date))
max.date <- max(as.Date(dates[!is.na(dates)], "%Y/%m/%d"))
my_db <- src_mysql("pitchfx", user = 'root', password="NEW-ROOT-PASSWORD", create = TRUE)
select(tbl(db, "atbat"), date)
installed.packages()
setwd("~/Projects/DFS/resultsAnalysis")
week.num <- 5
contest.entry.fee <- "$20"
predictions.source <- "_dfn" # Either "_dfn" or ""
formulation <- 2
file.name <- paste0("data_warehouse/contest_results/", contest.entry.fee, "_contest_full_results_week", week.num, ".csv")
full.results.data <- read.csv(file = file.name, stringsAsFactors = F)
View(full.results.data)
help(subset)
saahilsud <- subset(full.results.data, grepl("SaahilSud", EntryName))
View(saahilsud)
saahilsud <- subset(full.results.data, grepl("SaahilSud", EntryName))$Lineup
saahilsud <- subset(full.results.data, grepl("SaahilSud", EntryName))
saahilsud <- saahilsud$Lineup
saahilsud <- subset(full.results.data, grepl("SaahilSud", EntryName))
saahilsud <- saahilsud$Lineup
saahilsud <- subset(full.results.data, grepl("SaahilSud", EntryName))
temp <- saahilsud$Lineup
View(temp)
temp
write.csv(temp, file = 'saahilsud.wk5', row.names = F)
week.num <- 4
file.name <- paste0("data_warehouse/contest_results/", contest.entry.fee, "_contest_full_results_week", week.num, ".csv")
full.results.data <- read.csv(file = file.name, stringsAsFactors = F)
saahilsud <- subset(full.results.data, grepl("SaahilSud", EntryName))
temp <- saahilsud$Lineup
write.csv(temp, file = 'saahilsud.wk4', row.names = F)
View(saahilsud)
week.num <- 3
full.results.data <- read.csv(file = file.name, stringsAsFactors = F)
saahilsud <- subset(full.results.data, grepl("SaahilSud", EntryName))
View(saahilsud)
file.name <- paste0("data_warehouse/contest_results/", contest.entry.fee, "_contest_full_results_week", week.num, ".csv")
full.results.data <- read.csv(file = file.name, stringsAsFactors = F)
saahilsud <- subset(full.results.data, grepl("SaahilSud", EntryName))
View(saahilsud)
setwd("~/Projects/DFS/optimizationCode")
data <- read.csv("output.csv", stringsAsFactors = F, header = F)
occurences<-sort(table(unlist(data)), decreasing=T)
exposure<- occurences / nrow(data)
exposure
